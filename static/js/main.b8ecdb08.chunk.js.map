{"version":3,"sources":["app/app.tsx","serviceWorker.ts","index.tsx"],"names":["Combo","Tfw","View","Icon","Input","App","time","interval","sounds","voices","state","exercicesCount","exercicesDuration","repetitionsCount","pauseBetweenRepetitions","voice","play","handleVoiceChange","voiceName","setState","speak","handleStart","Converter","Integer","idxRepetition","push","speech","idxExercise","Date","now","window","setInterval","checkTime","handleStop","clearInterval","length","sound","shift","speechSynthesis","getVoices","filter","lang","startsWith","forEach","name","this","Object","keys","text","console","log","utter","SpeechSynthesisUtterance","pitch","rate","classes","StringArray","props","className","info","join","wide","label","value","onChange","map","key","storage","onClick","content","size","React","Component","Boolean","location","hostname","match","Theme","register","bg0","bg3","bgP","bgS","apply","ReactDOM","render","document","getElementById","logo","classList","add","setTimeout","parentNode","removeChild","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b8ecdb08.chunk.js","sourcesContent":["import React from \"react\"\nimport Tfw from 'tfw'\n\nimport \"./app.css\"\n\nconst Combo = Tfw.View.Combo\nconst Icon = Tfw.View.Icon\nconst Input = Tfw.View.Input\n\ninterface IAppProps {\n    className?: string[]\n}\ninterface IAppState {\n    exercicesCount: string\n    exercicesDuration: string\n    repetitionsCount: string\n    pauseBetweenRepetitions: string\n    voice: string\n    play: boolean\n}\n\ninterface ISound {\n    time: number\n    speech: string\n}\n\nconst INTERVAL = 200\n\nexport default class App extends React.Component<IAppProps, IAppState> {\n    private time = 0\n    private interval = 0\n    private sounds: ISound[] = []\n    private voices: { [key: string]: SpeechSynthesisVoice } = {}\n\n    state = {\n        exercicesCount: \"5\",\n        exercicesDuration: \"30\",\n        repetitionsCount: \"3\",\n        pauseBetweenRepetitions: \"60\",\n        voice: \"\",\n        play: false\n    }\n\n    componentDidMount() {\n        window.speechSynthesis.getVoices()\n            .filter(voice => voice.lang.startsWith(\"en\"))\n            .forEach(voice => {\n                this.voices[voice.name] = voice\n            })\n        this.setState(\n            { voice: Object.keys(this.voices)[0] },\n            () => this.speak(\"Bienvenue à la prière au soleil!\")\n        )\n    }\n\n    speak(text: string) {\n        console.log(text)\n        const voice = this.voices[this.state.voice]\n        if (!voice) return\n        const utter = new SpeechSynthesisUtterance(text)\n        //utter.voice = voice\n        utter.pitch = 1\n        utter.rate = 1\n        window.speechSynthesis.speak(utter)\n    }\n\n    handleVoiceChange = (voiceName: string) => {\n        this.setState({ voice: voiceName })\n        const voice = this.voices[voiceName]\n        if (!voice) return\n\n        this.speak(\"Hello guys! My name is Alfred: I am your personal coach.\")\n    }\n\n    handleStart = () => {\n        this.sounds = []\n\n        const exercicesCount = Tfw.Converter.Integer(this.state.exercicesCount, 0)\n        const exercicesDuration = Tfw.Converter.Integer(this.state.exercicesDuration, 0)\n        const repetitionsCount = Tfw.Converter.Integer(this.state.repetitionsCount, 0)\n        const pauseBetweenRepetitions = Tfw.Converter.Integer(this.state.pauseBetweenRepetitions, 0)\n        let time = 0\n\n        for (let idxRepetition = 0; idxRepetition < repetitionsCount; idxRepetition++) {\n            if (idxRepetition > 0) {\n                this.sounds.push({ time, speech: \"Pause\" })\n                time += pauseBetweenRepetitions\n            }\n            for (let idxExercise = 0; idxExercise < exercicesCount; idxExercise++) {\n                this.sounds.push({ time, speech: `Exercise ${idxExercise + 1} of ${exercicesCount}` })\n                time += exercicesDuration\n            }\n        }\n        this.sounds.push({ time, speech: `Well done!` })\n\n        this.time = Date.now()\n        this.interval = window.setInterval(this.checkTime, INTERVAL)\n        this.setState({ play: true })\n    }\n\n    handleStop = () => {\n        window.clearInterval(this.interval)\n        this.setState({ play: false }, () => this.speak(\"This session has been aborted!\"))\n    }\n\n    checkTime = () => {\n        const MILLISEC_TO_SEC = 0.001\n        const time = (Date.now() - this.time) * MILLISEC_TO_SEC\n        const { sounds } = this\n        if (sounds.length < 1) {\n            this.setState({ play: false })\n            return\n        }\n        const sound = sounds[0]\n        if (sound.time > time) return\n        sounds.shift()\n        this.speak(sound.speech)\n    }\n\n    render() {\n        const classes = [\n            'App', 'thm-bg0',\n            ...Tfw.Converter.StringArray(this.props.className, [])\n        ]\n        const voices = Object.keys(this.voices)\n        console.info(\"voices=\", voices)\n\n        return (<div className={classes.join(' ')}>\n            <div className=\"input\">\n                <Combo\n                    wide={true}\n                    label=\"Coach's voice\"\n                    value={this.state.voice}\n                    onChange={this.handleVoiceChange}>\n                    {\n                        voices.map(voiceName => <div key={voiceName}>{voiceName}</div>)\n                    }\n                </Combo>\n                <Input\n                    wide={true}\n                    label=\"Exercices Count\"\n                    storage=\"exercicesCount\"\n                    value={this.state.exercicesCount}\n                    onChange={exercicesCount => this.setState({ exercicesCount })} />\n                <Input\n                    wide={true}\n                    label=\"Exercices Duration\"\n                    storage=\"exercicesDuration\"\n                    value={this.state.exercicesDuration}\n                    onChange={exercicesDuration => this.setState({ exercicesDuration })} />\n                <Input\n                    wide={true}\n                    label=\"Repetitions Count\"\n                    storage=\"repetitionsCount\"\n                    value={this.state.repetitionsCount}\n                    onChange={repetitionsCount => this.setState({ repetitionsCount })} />\n                <Input\n                    wide={true}\n                    label=\"Pause Duration\"\n                    storage=\"pauseBetweenRepetitions\"\n                    value={this.state.pauseBetweenRepetitions}\n                    onChange={pauseBetweenRepetitions => this.setState({ pauseBetweenRepetitions })} />\n\n            </div>\n            <div className=\"play\" >\n                {\n                    !this.state.play &&\n                    <button className=\"button thm-bgP thm-ele-nav\" onClick={this.handleStart}>\n                        <Icon\n                            content=\"play\"\n                            size=\"30vmin\" />\n                    </button>\n                }\n                {\n                    this.state.play &&\n                    <button className=\"button thm-bgS thm-ele-nav\" onClick={this.handleStop}>\n                        <Icon\n                            content=\"pause\"\n                            size=\"30vmin\" />\n                    </button>\n                }\n            </div >\n        </div >)\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import Tfw from 'tfw'\nimport React from \"react\"\nimport ReactDOM from 'react-dom'\nimport App from './app'\nimport * as serviceWorker from './serviceWorker'\n\nimport \"./index.css\"\n\n\nconst FADING_DURATION = 1000\n\nTfw.Theme.register(\"chronos\", {\n    bg0: \"#ddb\",\n    bg3: \"#fff\",\n    bgP: \"#3f5\",\n    bgS: \"#f53\"\n})\nTfw.Theme.apply(\"chronos\")\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\nconst logo = document.getElementById(\"tp-logo\")\nif (logo) {\n    logo.classList.add(\"vanish\")\n    window.setTimeout(\n        () => { logo.parentNode ?.removeChild(logo) },\n        FADING_DURATION\n    )\n}\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister()\n"],"sourceRoot":""}