{"version":3,"sources":["app/app.tsx","serviceWorker.ts","index.tsx","app/ding.mp3"],"names":["Combo","Tfw","View","Icon","Input","App","refAudio","React","createRef","time","interval","sounds","voices","state","exercicesCount","exercicesDuration","repetitionsCount","pauseBetweenRepetitions","voice","play","handleVoiceChange","voiceName","setState","speak","handleStart","Converter","Integer","idxRepetition","count","push","speech","idxExercise","sort","a","b","Date","now","window","setInterval","checkTime","handleStop","clearInterval","length","sound","shift","console","info","speechSynthesis","getVoices","filter","lang","startsWith","forEach","name","this","Object","keys","Factory","Dialog","error","text","charAt","utter","SpeechSynthesisUtterance","substr","pitch","rate","audio","current","setTimeout","classes","StringArray","props","className","join","wide","label","value","onChange","map","key","storage","onClick","content","size","src","DingURL","ref","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","Theme","bg0","bg3","bgP","bgS","apply","ReactDOM","render","document","getElementById","logo","classList","add","parentNode","removeChild","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.facc958d.chunk.js","sourcesContent":["import React from \"react\"\nimport Tfw from 'tfw'\n\nimport \"./app.css\"\nimport DingURL from './ding.mp3'\n\nconst Combo = Tfw.View.Combo\nconst Icon = Tfw.View.Icon\nconst Input = Tfw.View.Input\n\ninterface IAppProps {\n    className?: string[]\n}\ninterface IAppState {\n    exercicesCount: string\n    exercicesDuration: string\n    repetitionsCount: string\n    pauseBetweenRepetitions: string\n    voice: string\n    play: boolean\n}\n\ninterface ISound {\n    time: number\n    speech: string\n}\n\nconst INTERVAL = 50\nconst DELAY_AFTER_DING = 1200\nconst COUNTDOWN = 5\n\nexport default class App extends React.Component<IAppProps, IAppState> {\n    private refAudio = React.createRef<HTMLAudioElement>()\n    private time = 0\n    private interval = 0\n    private sounds: ISound[] = []\n    private voices: { [key: string]: SpeechSynthesisVoice } = {}\n\n    state = {\n        exercicesCount: \"5\",\n        exercicesDuration: \"30\",\n        repetitionsCount: \"3\",\n        pauseBetweenRepetitions: \"60\",\n        voice: \"\",\n        play: false\n    }\n\n    componentDidMount() {\n        if ('speechSynthesis' in window) {\n            console.info(\"window.speechSynthesis=\", window.speechSynthesis)\n            window.speechSynthesis.getVoices()\n                .filter(voice => voice.lang.startsWith(\"en\"))\n                .forEach(voice => {\n                    this.voices[voice.name] = voice\n                })\n            this.setState(\n                { voice: Object.keys(this.voices)[0] },\n                () => this.speak(\"Bienvenue à la prière au soleil!\")\n            )\n        } else {\n            Tfw.Factory.Dialog.error(\"No speech synthesis on this device!\")\n        }\n    }\n\n    speak(text: string) {\n        if (text.charAt(0) === '#') {\n            // Countdown.\n            const utter = new SpeechSynthesisUtterance(text.substr(1))\n            const voice = this.voices[this.state.voice]\n            //if (voice) utter.voice = voice\n            utter.pitch = 1.4\n            utter.rate = 1\n            window.speechSynthesis.speak(utter)\n\n            return\n        }\n\n        const audio = this.refAudio.current\n        if (audio) {\n            audio.play()\n        }\n        window.setTimeout(\n            () => {\n                const utter = new SpeechSynthesisUtterance(text)\n                const voice = this.voices[this.state.voice]\n                if (voice) utter.voice = voice\n                utter.pitch = 0.9\n                utter.rate = 1.2\n                window.speechSynthesis.speak(utter)\n            },\n            DELAY_AFTER_DING\n        )\n    }\n\n    handleVoiceChange = (voiceName: string) => {\n        this.setState({ voice: voiceName })\n        const voice = this.voices[voiceName]\n        if (!voice) return\n\n        this.speak(\"Vous aimez ma voix ?\")\n    }\n\n    handleStart = () => {\n        this.sounds = []\n\n        const exercicesCount = Tfw.Converter.Integer(this.state.exercicesCount, 0)\n        const exercicesDuration = Tfw.Converter.Integer(this.state.exercicesDuration, 0)\n        const repetitionsCount = Tfw.Converter.Integer(this.state.repetitionsCount, 0)\n        const pauseBetweenRepetitions = Tfw.Converter.Integer(this.state.pauseBetweenRepetitions, 0)\n        let time = 0\n\n        for (let idxRepetition = 0; idxRepetition < repetitionsCount; idxRepetition++) {\n            if (idxRepetition > 0) {\n                // countdown.\n                for (let count = 1; count <= COUNTDOWN; count++) {\n                    this.sounds.push({ time: time - count, speech: `#${count}` })\n                }\n                this.sounds.push({ time, speech: `Pause de ${pauseBetweenRepetitions} secondes.` })\n                time += pauseBetweenRepetitions\n            }\n            for (let idxExercise = 0; idxExercise < exercicesCount; idxExercise++) {\n                if (idxRepetition > 0 || idxExercise > 0) {\n                    // countdown.\n                    for (let count = 1; count <= COUNTDOWN; count++) {\n                        this.sounds.push({ time: time - count, speech: `#${count}` })\n                    }\n                }\n                this.sounds.push({ time, speech: `Exercice ${idxExercise + 1} sur ${exercicesCount}` })\n                time += exercicesDuration\n            }\n        }\n        // countdown.\n        for (let count = 1; count <= COUNTDOWN; count++) {\n            this.sounds.push({ time: time - count, speech: `#${count}` })\n        }\n        this.sounds.push({ time, speech: `Bravo ! Cette session est terminée.` })\n        this.sounds.sort((a, b) => a.time - b.time)\n        this.time = Date.now()\n        this.interval = window.setInterval(this.checkTime, INTERVAL)\n        this.setState({ play: true })\n    }\n\n    handleStop = () => {\n        window.clearInterval(this.interval)\n        this.setState({ play: false }, () => this.speak(\"Cette session vient d'être annulée.\"))\n    }\n\n    checkTime = () => {\n        const MILLISEC_TO_SEC = 0.001\n        const time = (Date.now() - this.time) * MILLISEC_TO_SEC\n        const { sounds } = this\n        if (sounds.length < 1) {\n            this.setState({ play: false })\n            return\n        }\n        const sound = sounds[0]\n        if (sound.time > time) return\n        sounds.shift()\n        this.speak(sound.speech)\n    }\n\n    render() {\n        const classes = [\n            'App', 'thm-bg0',\n            ...Tfw.Converter.StringArray(this.props.className, [])\n        ]\n        const voices = Object.keys(this.voices)\n        console.info(\"voices=\", voices)\n\n        return (<div className={classes.join(' ')}>\n            <div className=\"input\">\n                {\n                    voices.length > 0 &&\n                    <Combo\n                        wide={true}\n                        label=\"Coach's voice\"\n                        value={this.state.voice}\n                        onChange={this.handleVoiceChange}>\n                        {\n                            voices.map(voiceName => <div key={voiceName}>{voiceName}</div>)\n                        }\n                    </Combo>\n                }\n                <div className=\"input\">\n                    <Input\n                        wide={true}\n                        label=\"Exercices Count\"\n                        storage=\"exercicesCount\"\n                        value={this.state.exercicesCount}\n                        onChange={exercicesCount => this.setState({ exercicesCount })} />\n                    <Input\n                        wide={true}\n                        label=\"Exercices Duration\"\n                        storage=\"exercicesDuration\"\n                        value={this.state.exercicesDuration}\n                        onChange={exercicesDuration => this.setState({ exercicesDuration })} />\n                </div>\n                <div className=\"input\">\n                    <Input\n                        wide={true}\n                        label=\"Repetitions Count\"\n                        storage=\"repetitionsCount\"\n                        value={this.state.repetitionsCount}\n                        onChange={repetitionsCount => this.setState({ repetitionsCount })} />\n                    <Input\n                        wide={true}\n                        label=\"Pause Duration\"\n                        storage=\"pauseBetweenRepetitions\"\n                        value={this.state.pauseBetweenRepetitions}\n                        onChange={pauseBetweenRepetitions => this.setState({ pauseBetweenRepetitions })} />\n                </div>\n            </div>\n            <div className=\"play\" >\n                {\n                    !this.state.play &&\n                    <button className=\"button thm-bgP thm-ele-nav\" onClick={this.handleStart}>\n                        <Icon\n                            content=\"play\"\n                            size=\"30vmin\" />\n                    </button>\n                }\n                {\n                    this.state.play &&\n                    <button className=\"button thm-bgS thm-ele-nav\" onClick={this.handleStop}>\n                        <Icon\n                            content=\"pause\"\n                            size=\"30vmin\" />\n                    </button>\n                }\n            </div >\n            <audio src={DingURL} ref={this.refAudio} />\n        </div >)\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import Tfw from 'tfw'\nimport React from \"react\"\nimport ReactDOM from 'react-dom'\nimport App from './app'\nimport * as serviceWorker from './serviceWorker'\n\nimport \"./index.css\"\n\n\nconst FADING_DURATION = 1000\n\nTfw.Theme.register(\"chronos\", {\n    bg0: \"#ddb\",\n    bg3: \"#fff\",\n    bgP: \"#3f5\",\n    bgS: \"#f53\"\n})\nTfw.Theme.apply(\"chronos\")\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\nconst logo = document.getElementById(\"tp-logo\")\nif (logo) {\n    logo.classList.add(\"vanish\")\n    window.setTimeout(\n        () => { logo.parentNode ?.removeChild(logo) },\n        FADING_DURATION\n    )\n}\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.register()\n","module.exports = __webpack_public_path__ + \"static/media/ding.627689c6.mp3\";"],"sourceRoot":""}