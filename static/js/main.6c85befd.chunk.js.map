{"version":3,"sources":["app/ding.mp3","app/app.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Combo","Tfw","View","Icon","Input","App","refAudio","React","createRef","time","interval","sounds","voices","state","exercicesCount","exercicesDuration","repetitionsCount","pauseBetweenRepetitions","voice","play","remainingTime","handleVoiceChange","voiceName","setState","speak","handleStart","Converter","Integer","idxRepetition","count","Math","min","push","speech","idxExercise","sort","a","b","sound","console","log","Date","now","window","setInterval","checkTime","handleStop","clearInterval","length","shift","info","speechSynthesis","getVoices","filter","lang","startsWith","forEach","name","this","Object","keys","setTimeout","Factory","Dialog","error","text","charAt","utter","SpeechSynthesisUtterance","substr","pitch","rate","audio","current","classes","StringArray","props","className","join","wide","label","value","onChange","map","key","storage","onClick","content","size","src","DingURL","ref","Component","Boolean","location","hostname","match","Theme","register","bg0","bg3","bgP","bgS","apply","ReactDOM","render","document","getElementById","logo","classList","add","parentNode","removeChild","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.6c85befd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ding.627689c6.mp3\";","import React from \"react\"\nimport Tfw from 'tfw'\n\nimport \"./app.css\"\nimport DingURL from './ding.mp3'\n\nconst VERSION = \"version 0.1.0\"\n\nconst Combo = Tfw.View.Combo\nconst Icon = Tfw.View.Icon\nconst Input = Tfw.View.Input\n\ninterface IAppProps {\n    className?: string[]\n}\ninterface IAppState {\n    exercicesCount: string\n    exercicesDuration: string\n    repetitionsCount: string\n    pauseBetweenRepetitions: string\n    voice: string\n    play: boolean\n    remainingTime: string\n}\n\ninterface ISound {\n    time: number\n    speech: string\n}\n\ninterface IProgress {\n    exercise: number\n    repetition: number\n}\n\nconst INTERVAL = 40\nconst DELAY_AFTER_DING = 1000\nconst COUNTDOWN = 5\n\nexport default class App extends React.Component<IAppProps, IAppState> {\n    private refAudio = React.createRef<HTMLAudioElement>()\n    private time = 0\n    private interval = 0\n    private sounds: ISound[] = []\n    private voices: { [key: string]: SpeechSynthesisVoice } = {}\n\n    state = {\n        exercicesCount: \"5\",\n        exercicesDuration: \"30\",\n        repetitionsCount: \"3\",\n        pauseBetweenRepetitions: \"60\",\n        voice: \"\",\n        play: false,\n        remainingTime: \"\"\n    }\n\n    componentDidMount() {\n        if ('speechSynthesis' in window) {\n            console.info(\"window.speechSynthesis=\", window.speechSynthesis)\n            window.speechSynthesis.getVoices()\n                .filter(voice => voice.lang.startsWith(\"fr\"))\n                .forEach(voice => {\n                    this.voices[voice.name] = voice\n                })\n            this.setState({ voice: Object.keys(this.voices)[0] })\n            window.setTimeout(\n                () => this.speak(\"#Bienvenue à la prière au soleil!\"),\n                DELAY_AFTER_DING\n            )\n\n        } else {\n            Tfw.Factory.Dialog.error(\"No speech synthesis on this device!\")\n        }\n    }\n\n    speak(text: string) {\n        console.log(\"speak:\", text)\n        if (text.charAt(0) === '#') {\n            // Countdown.\n            const utter = new SpeechSynthesisUtterance(text.substr(1))\n            const voice = this.voices[this.state.voice]\n            if (voice) utter.voice = voice\n            utter.pitch = 1.5\n            utter.rate = 1.1\n            window.speechSynthesis.speak(utter)\n\n            return\n        }\n\n        const audio = this.refAudio.current\n        if (audio) {\n            audio.play()\n        }\n        window.setTimeout(\n            () => {\n                const utter = new SpeechSynthesisUtterance(text)\n                const voice = this.voices[this.state.voice]\n                if (voice) utter.voice = voice\n                utter.pitch = 0.9\n                utter.rate = 1.2\n                window.speechSynthesis.speak(utter)\n            },\n            DELAY_AFTER_DING\n        )\n    }\n\n    handleVoiceChange = (voiceName: string) => {\n        this.setState({ voice: voiceName })\n        const voice = this.voices[voiceName]\n        if (!voice) return\n\n        this.speak(\"Vous aimez ma voix ?\")\n    }\n\n    handleStart = () => {\n        this.sounds = []\n\n        const exercicesCount = Tfw.Converter.Integer(this.state.exercicesCount, 0)\n        const exercicesDuration = Tfw.Converter.Integer(this.state.exercicesDuration, 0)\n        const repetitionsCount = Tfw.Converter.Integer(this.state.repetitionsCount, 0)\n        const pauseBetweenRepetitions = Tfw.Converter.Integer(this.state.pauseBetweenRepetitions, 0)\n        let time = 0\n        const TIME_WITHOUT_COUNTDOWN = 5\n\n        for (let idxRepetition = 0; idxRepetition < repetitionsCount; idxRepetition++) {\n            if (idxRepetition > 0) {\n                // countdown.\n                for (let count = 1; count <= Math.min(COUNTDOWN, pauseBetweenRepetitions - TIME_WITHOUT_COUNTDOWN); count++) {\n                    this.sounds.push({ time: time - count, speech: `#${count}` })\n                }\n                this.sounds.push({ time, speech: `Pause de ${pauseBetweenRepetitions} secondes.` })\n                time += pauseBetweenRepetitions\n            }\n            for (let idxExercise = 0; idxExercise < exercicesCount; idxExercise++) {\n                if (idxRepetition > 0 || idxExercise > 0) {\n                    // countdown.\n                    for (let count = 1; count <= Math.min(COUNTDOWN, exercicesDuration - TIME_WITHOUT_COUNTDOWN); count++) {\n                        this.sounds.push({ time: time - count, speech: `#${count}` })\n                    }\n                }\n                this.sounds.push({ time, speech: `Exercice ${idxExercise + 1} sur ${exercicesCount}` })\n                time += exercicesDuration\n            }\n        }\n        // countdown.\n        for (let count = 1; count <= Math.min(COUNTDOWN, exercicesDuration - TIME_WITHOUT_COUNTDOWN); count++) {\n            this.sounds.push({ time: time - count, speech: `#${count}` })\n        }\n        this.sounds.push({ time, speech: `Bravo ! Cette session est terminée.` })\n        this.sounds.sort((a, b) => a.time - b.time)\n        for (const sound of this.sounds) {\n            console.log(sound.time, sound.speech)\n        }\n        this.time = Date.now()\n        this.interval = window.setInterval(this.checkTime, INTERVAL)\n        this.setState({ play: true })\n    }\n\n    handleStop = () => {\n        this.sounds = []\n        window.clearInterval(this.interval)\n        this.interval = 0\n        this.setState({ play: false }, () => this.speak(\"Cette session vient d'être annulée.\"))\n    }\n\n    checkTime = () => {\n        const MILLISEC_TO_SEC = 0.001\n        const time = (Date.now() - this.time) * MILLISEC_TO_SEC\n        const { sounds } = this\n        if (sounds.length < 1) {\n            this.setState({ play: false })\n            return\n        }\n        const sound = sounds[0]\n        if (sound.time > time) return\n        sounds.shift()\n        this.speak(sound.speech)\n    }\n\n    render() {\n        const classes = [\n            'App', 'thm-bg0',\n            ...Tfw.Converter.StringArray(this.props.className, [])\n        ]\n        const voices = Object.keys(this.voices)\n        console.info(\"voices=\", voices)\n\n        return (<div className={classes.join(' ')}>\n            <header className=\"thm-bgP thm-ele-bar\">\n                <div>{VERSION}</div>\n                <div>{this.state.remainingTime}</div>\n            </header>\n            <div className=\"input\">\n                {\n                    voices.length > 0 &&\n                    <Combo\n                        wide={true}\n                        label=\"Coach's voice\"\n                        value={this.state.voice}\n                        onChange={this.handleVoiceChange}>\n                        {\n                            voices.map(voiceName => <div key={voiceName}>{voiceName}</div>)\n                        }\n                    </Combo>\n                }\n                <div className=\"input\">\n                    <Input\n                        wide={true}\n                        label=\"Exercices Count\"\n                        storage=\"exercicesCount\"\n                        value={this.state.exercicesCount}\n                        onChange={exercicesCount => this.setState({ exercicesCount })} />\n                    <Input\n                        wide={true}\n                        label=\"Exercices Duration\"\n                        storage=\"exercicesDuration\"\n                        value={this.state.exercicesDuration}\n                        onChange={exercicesDuration => this.setState({ exercicesDuration })} />\n                </div>\n                <div className=\"input\">\n                    <Input\n                        wide={true}\n                        label=\"Repetitions Count\"\n                        storage=\"repetitionsCount\"\n                        value={this.state.repetitionsCount}\n                        onChange={repetitionsCount => this.setState({ repetitionsCount })} />\n                    <Input\n                        wide={true}\n                        label=\"Pause Duration\"\n                        storage=\"pauseBetweenRepetitions\"\n                        value={this.state.pauseBetweenRepetitions}\n                        onChange={pauseBetweenRepetitions => this.setState({ pauseBetweenRepetitions })} />\n                </div>\n            </div>\n            <div className=\"play\" >\n                {\n                    !this.state.play &&\n                    <button className=\"button thm-bgP thm-ele-nav\" onClick={this.handleStart}>\n                        <Icon\n                            content=\"play\"\n                            size=\"30vmin\" />\n                    </button>\n                }\n                {\n                    this.state.play &&\n                    <button className=\"button thm-bgS thm-ele-nav\" onClick={this.handleStop}>\n                        <Icon\n                            content=\"pause\"\n                            size=\"30vmin\" />\n                    </button>\n                }\n            </div >\n            <audio src={DingURL} ref={this.refAudio} />\n        </div >)\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import Tfw from 'tfw'\nimport React from \"react\"\nimport ReactDOM from 'react-dom'\nimport App from './app'\nimport * as serviceWorker from './serviceWorker'\n\nimport \"./index.css\"\n\n\nconst FADING_DURATION = 1000\n\nTfw.Theme.register(\"chronos\", {\n    bg0: \"#cec\",\n    bg3: \"#fff\",\n    bgP: \"#2ca600\",\n    bgS: \"#f86\"\n})\nTfw.Theme.apply(\"chronos\")\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\nconst logo = document.getElementById(\"tp-logo\")\nif (logo) {\n    logo.classList.add(\"vanish\")\n    window.setTimeout(\n        () => { logo.parentNode ?.removeChild(logo) },\n        FADING_DURATION\n    )\n}\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister()\n"],"sourceRoot":""}